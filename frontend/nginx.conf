user  nginx;
worker_processes  auto;


error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    client_max_body_size 512M;
    client_body_buffer_size 10M;  # Prevent excessive disk buffering
    proxy_buffering off;  # Disable proxy buffering

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # Add HSTS header to all requests to force browsers to use HTTPS
    # Do "max-age=15768000; includeSubDomains" instead of just "max-age=..." if using subdomains
    add_header Strict-Transport-Security "max-age=15768000" always;

    ssl_protocols TLSv1.2 TLSv1.3; # Prefer 1.3, fallback to 1.2, reject all others
    ssl_prefer_server_ciphers on; # Use the server’s cipher preference, not the client’s

    # A list of all ciphers to permit, sorted most to least preferred. ! indicates ciphers to reject.
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    # Share the cache with all worker processes across cores; Name the cache SSL; Set to 5 min
    ssl_session_cache shared:SSL:5m;

    # The length of time a client can reuse session parameters
    ssl_session_timeout 1h;

    # Use our custom strong Diffie-Hellman for handshakes
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # Secure it with an elliptic curve algorithm instead of RSA
    ssl_ecdh_curve secp384r1;

#     Redirecting to port 443
    server {
        listen 80;
        server_tokens off;
        server_name _;
        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
        return 301 https://$host$request_uri;
    }

    upstream backend {
        server backend:8000;
    }

    server {
	    listen 443 ssl default_server;
# 	    http2 on;
	    server_name localhost;
	    server_tokens off;

	    ssl_certificate     /etc/nginx/ssl/server.crt;
	    ssl_certificate_key /etc/nginx/ssl/server.key;

	    client_body_buffer_size 10M;  # Prevent excessive disk buffering
        proxy_buffering off;  # Disable proxy buffering

          # uncomment iddf frontend will be in a separate container
          # it has some bugs as path mutation
#         location / {
#             proxy_pass http://frontend:3000/;
#             proxy_redirect off;
#         }

        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html =404;
        }

	    location /api/ {
	        proxy_pass http://backend/api/;
	        include  /etc/nginx/mime.types;
	        proxy_redirect off;
	        proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

   }

    gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
